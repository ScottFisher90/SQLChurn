/*
 CHURN SQL PROJECT
 Examine earliest and latest subscription start dates
 */
 SELECT MIN(subscription_start), MAX(subscription_start)
 FROM subscriptions
 LIMIT 100;

/*
Create a temp table for the first three months of 2017 
*/
WITH months AS (
  SELECT
    '2017-01-01' AS first_day,
    '2017-01-31' AS last_day
  UNION
  SELECT
    '2017-02-01' AS first_day,
    '2017-02-28' AS last_day
  UNION
    '2017-03-01' AS first_day,
    '2017-03-31' AS last_day
  FROM subscriptions
),
/*
Cross join of months temp table and subscriptions 
*/
cross_join AS (
  SELECT *
  FROM subscriptions
  CROSS JOIN months
),
/*
temporary table that funnels users, by section, and labels if they are still active users or not
*/
status AS (
  SELECT id, first_day as month,
  CASE
    WHEN segment = 87 AND (subscription_start < first_day) 
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
    ELSE 0
  END AS is_active_87,
  CASE 
    WHEN segment = 30 AND (subscription_start < first_day) 
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
    ELSE 0
  END AS is_active_30,
  CASE 
    WHEN (subscription_end BETWEEN first_day AND last_day) AND (segment = 87) THEN 1
    ELSE 0
  END AS is_canceled_87,
  CASE 
    WHEN (subscription_end BETWEEN first_day AND last_day) AND (segment = 30) THEN 1
    ELSE 0
  END AS is_canceled_30
FROM cross_join
),
/*
sum active and canceled users to find total numbers
*/
status_aggregate AS (
  SELECT month, SUM(is_active_87) AS sum_active_87, SUM(is_active_30) AS sum_active_30, SUM(is_canceled_87) AS sum_canceled_87, SUM(is_canceled_30) AS sum_canceled_30
  FROM status
  GROUP BY month
);

/*
Calculate churn for each group 
*/
SELECT sum_canceled_87/sum_active_87 AS churn_87, sum_canceled_30/sum_active_30 AS churn_30
FROM status_aggregate;
/*
IMPROVEMENTS:
code can be generalized by not hard-coding segment numbers, lending to more use for other datasets 
*/
